blueprint:
  name: Presense-activated Light
  description: Turn on the lights when any kind of presence is detected, and
    turn them back off when no presence is detected after the wait time have
    elapsed. Works with three kinds of sensor types; Motion, moving & occupancy.
  domain: automation
  source_url: https://github.com/revam/ha-automation/blob/main/blueprints/lights/presence_light.yaml
  author: revam
  input:
    light_targets:
      name: Lights
      description: The lights to control.
      selector:
        target:
          entity:
            domain: light
    presence_targets:
      name: Presence Sensors
      description: The sensors used to detect presence in the area to monitor.
      selector:
        entity:
          filter:
            device_class:
              - motion
              - moving
              - occupancy
            domain: binary_sensor
          multiple: true
    no_presence_wait:
      name: "No Presence Wait Time"
      description: "Time to leave the light on after no presence is detected."
      default: 120
      selector:
        number:
          min: 0
          max: 3600
          unit_of_measurement: seconds
mode: restart
max_exceeded: silent
variables:
  lights: !input light_targets
  # if somebody knows an easier way that works reliably with targets, then please do tell me.
  light_entities: |
    {%- macro target_entities(target, domain_filter='light') -%}
      {%- set en = namespace(tries=[]) -%}
      {%- if target.area_id is defined -%}
        {%- if target.area_id is string -%}
          {%- set en.tries = en.tries + (area_entities(target.area_id) | reject('is_hidden_entity') | select('match', '^' ~ domain_filter ~ '\.') | list) -%}
        {%- else -%}
          {%- for a in target.area_id -%}
            {%- set en.tries = en.tries + (area_entities(a) | reject('is_hidden_entity') | select('match', '^' ~ domain_filter ~ '\.') | list) -%}
          {%- endfor -%}
        {%- endif -%}
      {%- endif -%}
      {%- if target.device_id is defined -%}
        {%- if target.device_id is string -%}
          {%- set en.tries = en.tries + (device_entities(target.device_id) | reject('is_hidden_entity') | select('match', '^' ~ domain_filter ~ '\.') | list) -%}
        {%- else -%}
          {%- for device_id in target.device_id -%}
            {%- set en.tries = en.tries + (device_entities(device_id) | reject('is_hidden_entity') | select('match', '^' ~ domain_filter ~ '\.') | list) -%}
          {%- endfor -%}
        {%- endif -%}
      {%- endif -%}
      {%- if target.entity_id is defined -%}
        {%- if target.entity_id is string -%}
          {%- if target.entity_id.split('.')[0] == domain_filter -%}
            {%- set en.tries = en.tries + [target.entity_id] -%}
          {%- endif -%}
        {%- else -%}
          {%- for entity_id in target.entity_id -%}
            {%- if entity_id.split('.')[0] == domain_filter -%}
              {%- set en.tries = en.tries + [entity_id] -%}
            {%- endif -%}
          {%- endfor -%}
        {%- endif -%}
      {%- endif -%}
      {{ en.tries | unique | sort | list }}
    {%- endmacro -%}
    {{ target_entities(lights) }}
  sensor_entities: !input presence_targets
  any_on: "{{ light_entities | select('is_state', 'on') | list | count > 0 }}"
  any_off: "{{ light_entities | select('is_state', 'off') | list | count > 0 }}"
  any_occupied: "{{ sensor_entities | select('is_state', 'on') | list | count > 0 }}"
trigger:
  - platform: state
    entity_id: !input presence_targets
    to:
      - "on"
      - "off"
action:
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ any_occupied and any_off }}"
        sequence:
          - alias: "Turn on the light"
            service: light.turn_on
            target: !input light_targets
      - conditions:
          - condition: template
            value_template: "{{ not any_occupied and any_on }}"
        sequence:
          - alias: "Wait the number of seconds that has been set"
            delay: !input no_presence_wait
          - alias: "Turn off the light"
            service: light.turn_off
            target: !input light_targets
    default: []
